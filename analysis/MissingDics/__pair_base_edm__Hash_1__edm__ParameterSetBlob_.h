//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Fri May 19 18:49:57 2023 by ROOT version 6.28/00)
//      from the StreamerInfo in file /data/submit/pdmonte/D02/GJets_HT-40To100_TuneCP5_13TeV-madgraphMLM-pythia8+RunIISummer20UL18MiniAODv2-106X_upgrade2018_realistic_v16_L1v1-v2+MINIAODSIM/200FAB84-65CB-A945-8F9F-9EB261762271.root
//////////////////////////////////////////////////////////


#ifndef __pair_base_edm__Hash_1__edm__ParameterSetBlob__h
#define __pair_base_edm__Hash_1__edm__ParameterSetBlob__h
namespace edm {
template <int T0> class Hash;
template <> class Hash<1>;
} // end of namespace.
namespace edm {
class ParameterSetBlob;
} // end of namespace.
template <typename T0, typename T1> class __pair_base;

#include "Rtypes.h"
#include "edm__Hash_1_.h"
#include "edm__ParameterSetBlob.h"

#ifndef template___pair_base_edm__Hash_h
#define template___pair_base_edm__Hash_h
template <typename T0, typename T1> class __pair_base {

public:
// Nested classes declaration.

public:
// Data Members.

   __pair_base() {
   }
   __pair_base(__pair_base && ) = default;
   __pair_base &operator=(const __pair_base & rhs)
   {
   // This is NOT a copy operator=. This is actually a move operator= (for stl container's sake).
   // Use at your own risk!
   (void)rhs; // avoid warning about unused parameter
   return *this;
   }
   __pair_base(const __pair_base & rhs )
   {
   // This is NOT a copy constructor. This is actually a move constructor (for stl container's sake).
   // Use at your own risk!
   (void)rhs; // avoid warning about unused parameter
   }
   virtual ~__pair_base() {
      }

};
#endif // generic template declaration
#endif
